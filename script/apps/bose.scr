#!./hermelin
#
# Calculate Bose factors
#

bose_n(T, E)
{
	n = 1. / (exp(E / (k_B_eVperK * T)) - 1.);
	return n;
}


bose_nplus1(T, E)
{
	n1 = bose_n(T, E) + 1.;
	return n1;
}


# S(-Q, -om) / S(Q, om)
boltz(T, omega)
{
	return exp(-hbar*omega / (k_B_eVperK * T));
}


usage(app)
{
	print("\nBose factor calculation\n\nUsage: e.g. " + app + " T=25 Emin=0.1 Emax=5");
	print("\tT in K\n\tEmin in meV\n\tEmax in meV\n");
}


main(args)
{
	if(vec_size(args) leq 1)
	{
		usage(args[0]);
		return -1;
	}

	Emin = 0.1;
	Emax = 5.;
	
	for(arg : args)
	{
		arg_split = trim(split(arg, "="));

		if(arg_split[0] eq "T")
		{
			T = real(arg_split[1]);
			strT = "T = " + T + "K";
		}
		else if(arg_split[0] eq "Emin")
			Emin = real(arg_split[1]);
		else if(arg_split[0] eq "Emax")
			Emax = real(arg_split[1]);
	}
	if(not has_var("T"))
	{
		usage(args[0]);
		print("Error: No temperature T given");
		return -1;
	}


	omega = linspace(Emin*1e-3, Emax*1e-3, 128);
	b_n = bose_n(T, omega);
	b_n1 = bose_nplus1(T, omega);

	rel = b_n1 / b_n;

	plot([[omega*1e3, b_n, ["style":"line", "legend":"<n>"]], 
		[omega*1e3, b_n1, ["style":"line", "legend":"<n+1>"]]
		], 
		
		["title" : "Bose occupation factors for " + strT, 
		"xlabel" : "E (meV)", 
		"ylabel" : "Occupation", 
		"window" : 0]);

	plot(omega*1e3, rel, 

		["xlabel" : "E (meV)", 
		"ylabel" : "<n+1> / <n>", 
		"style" : "line",
		"title" : "<n+1> / <n> for " + strT, 
		"window" : 1]);

	return 0;
}
