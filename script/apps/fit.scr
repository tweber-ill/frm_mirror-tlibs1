#
# Fitting routines
# Author: tw
#

module_init()
{
	global hwhm2sigma = 1./(sqrt(2.*log(2.)));
}


# -----------------------------------------------------------------------------
# multi gaussian

map_to_vec(themap, thekeys)
{
	v = vec(length(themap));
	for(key : thekeys)
	{
		#print(cur_iter(key));
		v[cur_iter(key)] = themap[key];
	}

	return v;
}

# params: x0_0, sigma_0, amp_0, x0_1, sigma_1, amp_1, ..., offs
multigauss_model(x, params)
{
	numgauss = (length(params)-1) / 3;

	x0s = vec(numgauss);
	sigmas = vec(numgauss);
	amps = vec(numgauss);

	for(igauss=0; igauss<numgauss; igauss+=1)
	{
		x0s[igauss] = params[igauss*3 + 0];
		sigmas[igauss] = params[igauss*3 + 1];
		amps[igauss] = params[igauss*3 + 2];
	}

	offs = params[-1];


	y = offs;

	for(i=0; i<numgauss; i+=1)
	{
		x0 = x0s[i];
		sigma = sigmas[i];
		amp = amps[i];

		y += amp * exp(-0.5 * ((x-x0) / sigma)^2.);
	}

	return y;
}

fit_multigauss_manual(x, y, yerr, peaks_x, peaks_size, peaks_width)
{
	numgauss = length(peaks_x);
	param_vec = vec(numgauss*3 + 1);

	hints = vec(numgauss*3 + 1);
	hints_err = vec(numgauss*3 + 1);

	lowerlims = map();
	upperlims = map();

        yrange = max(y)-min(y);

	for(iGauss=0; iGauss<numgauss; iGauss+=1)
	{
		amp_name = "amp_" + str(iGauss);
		sig_name = "sigma_" + str(iGauss);
		x0_name = "x0_" + str(iGauss);

		param_vec[iGauss*3 + 0] = x0_name;
		param_vec[iGauss*3 + 1] = sig_name;
		param_vec[iGauss*3 + 2] = amp_name;

		hints[iGauss*3 + 0] = peaks_x[iGauss];
		hints[iGauss*3 + 1] = peaks_width[iGauss];
		hints[iGauss*3 + 2] = peaks_size[iGauss];

		hints_err[iGauss*3 + 0] = hints[iGauss*3 + 0] / 10.;
		hints_err[iGauss*3 + 1] = hints[iGauss*3 + 1] / 10.;
		hints_err[iGauss*3 + 2] = hints[iGauss*3 + 2] / 10.;

		lowerlims[amp_name] = min(y);
		upperlims[amp_name] = max(y);
		lowerlims[sig_name] = 0.;
	}
	param_vec[-1] = "offs";
	lowerlims["offs"] = min(y);
	upperlims["offs"] = max(y);
	hints[-1] = min(y);
	hints_err[-1] = yrange/10.;

	#print("Multigauss parameters: " + str(param_vec));

        for(thisyerr : yerr)
        {
                if(thisyerr eq 0.)
                        thisyerr = yrange*0.001;
        }

	fitsteps = vec();
	for(iStep=0; iStep<numgauss; iStep+=1)
	{
		before = iStep;
		remaining = numgauss-iStep-1;
		fitsteps[length(fitsteps)] = "fff"*before + "frr" + "fff"*remaining + "f";
	}

        for(iStep=0; iStep<numgauss; iStep+=1)
        {
                before = iStep;
                remaining = numgauss-iStep-1;
                fitsteps[length(fitsteps)] = "fff"*before + "rff" + "fff"*remaining + "r";
        }

	fitsteps[length(fitsteps)] = "x"*(numgauss*3 + 1);

        fitparams = fit("multigauss_model", x, y, yerr,
                        [
				"use_param_vec" : param_vec,
                                "hints":hints, "hints_errors":hints_err,
                                "lower_limits":lowerlims, "upper_limits":upperlims,
                                "debug":1,
                                "steps":fitsteps
                        ]
                        );

        return [fitparams, param_vec];
}


# -----------------------------------------------------------------------------
# double gaussian
doublegauss_model(x, x0_0, sigma_0, amp_0, x0_1, sigma_1, amp_1, offs)
{
	return amp_0 * exp(-0.5 * ((x-x0_0) / sigma_0)^2.) 
		+ amp_1 * exp(-0.5 * ((x-x0_1) / sigma_1)^2.) 
		+ offs;
}

fit_doublegauss_manual2(x, y, yerr, E0, peaks_x, peaks_size, peaks_width)
{
	has_left = 0;
	has_right = 0;
	idx_lt = 0;
	idx_rt = 1;
	for(px : peaks_x)
	{
		if(has_left eq 0 and px less E0)
		{
			idx_lt = cur_iter(px);
			has_left = 1;
		}

		if(has_right eq 0 and px greater E0)
		{
			idx_rt = cur_iter(px);
			has_right = 1;
		}
	}


	# Minuit doesn't handle errors == 0
	yrange = max(y)-min(y);
	for(thisyerr : yerr)
	{
		if(thisyerr eq 0.)
			thisyerr = yrange*0.001;
	}

	hints = [peaks_x[idx_lt], peaks_width[idx_lt], peaks_size[idx_lt], 
		peaks_x[idx_rt], peaks_width[idx_rt], peaks_size[idx_rt],
		min(y)];

	hints_err = [peaks_x[idx_lt]/10., peaks_width[idx_lt]/10., peaks_size[idx_lt]/10., 
		peaks_x[idx_rt]/10., peaks_width[idx_rt]/10., peaks_size[idx_rt]/10.,
		yrange/10.];

	#x_ = linspace(0., 10., 64);
	#y_ = doublegauss_model(x_, peaks_x[idx_lt], peaks_width[idx_lt], peaks_size[idx_lt], peaks_x[idx_rt], peaks_width[idx_rt], peaks_size[idx_rt], 0.);
	#plot(x_, y_, ["style":"line"]);

	#print("Hints: " + str(hints));

#	lowerlims = ["x0_0":peaks_x[idx_lt]*0.8., "x0_1":peaks_x[idx_rt]*0.8., "amp_0":peaks_size[idx_lt]*0.8, "amp_1":peaks_size[idx_rt]*0.8., "sigma_0":peaks_width[idx_lt]*0.8, "sigma_1":peaks_width[idx_rt]*0.8, "offs":min(y)];
#	upperlims = ["x0_0":peaks_x[idx_lt]*1.2, "x0_1":peaks_x[idx_rt]*1.2., "amp_0":peaks_size[idx_lt]*1.2., "amp_1":peaks_size[idx_rt]*1.2., "sigma_0":peaks_width[idx_lt]*1.2, "sigma_1":peaks_width[idx_rt]*1.2, "offs":max(y)];

	lowerlims = ["amp_0":min(y), "amp_1":min(y), "sigma_0":0., "sigma_1":0., "offs":min(y)];
	upperlims = ["amp_0":max(y), "amp_1":max(y), "offs":max(y)];

	fitparams = fit("doublegauss_model", x, y, yerr, 
			[
				"hints":hints, "hints_errors":hints_err,
				"lower_limits":lowerlims, "upper_limits":upperlims,
				"fixed":["offs"], "debug":1,
				"steps":["frrffff", "ffffrrf", "rfffffr", "fffrffr", "xxxxxxx"]
			]
			);

	return fitparams;
}

fit_doublegauss_manual(x, y, yerr, peaks_x, peaks_size, peaks_width)
{
	x0 = min([peaks_x[0], peaks_x[1]]);
	x1 = max([peaks_x[0], peaks_x[1]]);
	E0 = x0 + (x1-x0)/2.;
	return fit_doublegauss_manual2(x, y, yerr, E0, peaks_x, peaks_size, peaks_width);
}

# two peaks left and right of E0
fit_doublegauss(x, y, yerr, E0)
{
	peaks = find_peaks(x, y);
	#print("Peaks: " + str(peaks));

	peaks_x = peaks[0];
	peaks_size = peaks[1];
	peaks_width = peaks[2] * hwhm2sigma;

	if(length(peaks_x) less 2 or length(peaks_size) less 2 or length(peaks_width) less 2)
	{
		print("Error: Prefitter didn't find enough peaks.");
		return 0;
	}
	
	return fit_doublegauss_manual(x, y, yerr, E0, peaks_x, peaks_size, peaks_width);
}
# -----------------------------------------------------------------------------





# -----------------------------------------------------------------------------
# gaussian
gauss_model(x, x0, sigma, amp, offs)
{
	return amp * exp(-0.5 * ((x-x0) / sigma)^2.) + offs;
}

fit_gauss_manual(x, y, yerr, peak_x, peak_size, peak_width)
{
	# Minuit doesn't handle errors == 0
	yrange = max(y)-min(y);
	for(thisyerr : yerr)
	{
		if(thisyerr eq 0.)
			thisyerr = yrange*0.001;
	}

	hints = [peak_x, peak_width, peak_size, min(y)];
	hints_err = [peak_x/10., peak_width/10., peak_size/10., yrange/10.];

	lowerlims = ["amp":min(y), "sigma":0., "offs":min(y)];
	upperlims = ["amp":max(y), "offs":max(y)];

	fitparams = fit("gauss_model", x, y, yerr, 
			[
				"hints":hints, "hints_errors":hints_err,
				"lower_limits":lowerlims, "upper_limits":upperlims,
				"fixed":["offs"], "debug":1,
				"steps":["frrf", "rffr", "xxxx"]
			]
			);

	return fitparams;
}

fit_gauss(x, y, yerr)
{
	peaks = find_peaks(x, y);
	#print("Peaks: " + str(peaks));

	peaks_x = peaks[0];
	peaks_size = peaks[1];
	peaks_width = peaks[2] * hwhm2sigma;

	if(length(peaks_x) less 1 or length(peaks_size) less 1 or length(peaks_width) less 1)
	{
		print("Error: Prefitter didn't find enough peaks.");
		return 0;
	}

	return fit_gauss_manual(x, y, yerr, peaks_x[0], peaks_size[0], peaks_width[0]);
}
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# line
line_model(x, m, b)
{
	return m*x + b;
}

line_model_zero(x, m)
{
	return m*x;
}


fit_line(x, y, yerr)
{
	m_hint = (y[-1]-y[0]) / (x[-1]-x[0]);
	b_hint = y[0] - m_hint*x[0];
	m_hint_err = m_hint/10.;
	b_hint_err = b_hint/10.;

	fitparams = fit("line_model", x, y, yerr,
			[
				"hints" : [m_hint, b_hint], "hints_errors" : [m_hint_err, b_hint_err],
				"debug" : 1,
				"steps" : ["fr", "rf", "xx"]
			]);
	return fitparams;
}

fit_line_zero(x, y, yerr)
{
	m_hint = (y[-1]-y[0]) / (x[-1]-x[0]);
	m_hint_err = m_hint/10.;

	fitparams = fit("line_model_zero", x, y, yerr,
			[
				"hints" : [m_hint], "hints_errors" : [m_hint_err],
				"debug" : 1
			]);
	return fitparams;
}
# -----------------------------------------------------------------------------
