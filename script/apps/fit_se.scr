#!./hermelin
# Spin-echo fitting routines
# @author tw
# @date oct-2015

module_init()
{
	import("apps/instr.scr");
	import("apps/fit.scr");

	global hbar_mueVps = hbar_eVs * 1e6 * 1e12;
}


# -----------------------------------------------------------------------------

sesine_model(x, amp, freq, phase, offs)
{
	return amp*sin(freq*x + phase) + offs;
}

seexp_model(tau, gamma, P0)
{
	return P0*exp(-gamma*tau / hbar_mueVps);
}


fit_sesine(x, y, yerr, thefreq=-1.)
{
	xmin = min(x); xmax = max(x);
	ymin = min(y); ymax = max(y);
	xrange = xmax-xmin; yrange = ymax-ymin;
	ymid = 0.5*yrange + ymin;

	if(thefreq < 0.)
		thefreq = 2.*pi / xrange;

	hints = [ymax-ymid, thefreq, 0., ymid];
	hints_err = [0.1*hints[0], 0.1*hints[1], pi, 0.1*hints[2]];

	thefit = fit("sesine_model", x, y, yerr,
		["hints" : hints, "hints_errors" : hints_err,
		"fixed" : ["freq"],
		"debug" : fit_dbg]);

	#print("sesine fit: " + str(thefit));

	A = thefit["amp"][0]; dA = thefit["amp"][1];
	O = thefit["offs"][0]; dO = thefit["offs"][1];
	ph = thefit["phase"][0]; dph = thefit["phase"][1];

	P = A/O;
	dP = sqrt((dA/O)^2. + (A*dO/(O^2.))^2.);

	return [[P, dP, ph, dph], 
		fit_points(thefit, xmin, xmax, 128)];
}

fit_seexp(tau, P, Perr, P0=-1.)
{
	if(P0 >= 0.)
	{
		fixed_P0 = 1;
	}
	else
	{
		fixed_P0 = 0;
		P0 = 1.;
	}

	fitmap = map();
	fitmap["hints"] = [200., P0];
	fitmap["hints_errors"] = [100., 0.2];
	fitmap["debug"] = fit_dbg;
	if(fixed_P0) 
		fitmap["fixed"] = ["P0"];

	thefit = fit("seexp_model", tau, P, Perr, fitmap);

	G = thefit["gamma"][0]; dG = thefit["gamma"][1];
	P0 = thefit["P0"][0]; dP0 = thefit["P0"][1];

	return [[G, dG, P0, dP0], fit_points(thefit, 0., max(tau)+1., 128)];
}

# -----------------------------------------------------------------------------


do_seseries(files, taus)
{
	phs = []; ph_errs = [];
	Ps = []; P_errs = [];

	for(curfile : zip(files, taus))
	{
		print("Processing file(s): " + str(curfile[0]) + " with tau = " + curfile[1] + " ps.");

		[instr, dat_x, dat_y, dat_yerr, xlab, ylab] = load_instr(curfile);
		[[P, dP, ph, dph], [xfine, yfit]] = fit_sesine(dat_x, dat_y, dat_yerr);
		print("P = " + P + " +- " + dP);
		print("ph = " + (ph/pi*180.) + " +- " + (dph/pi*180.));

		ylims = "0 " + str(max(dat_y)+max(dat_yerr)*2.);

		sintitle = "P = " + P + " +- " + dP + ", phi = " + (ph/pi*180.) + " deg +- " + (dph/pi*180.) + " deg";

		plot([[dat_x, dat_y, dat_yerr, ["style":"points"]],
			[xfine, yfit, ["style":"line"]]], 
			["title":sintitle, "xlabel":xlab, "ylabel":ylab, "ylimits":ylims]);


		Ps[length(Ps)] = P; P_errs[length(P_errs)] = dP;
		phs[length(phs)] = ph; ph_errs[length(ph_errs)] = dph;

		print("-"*80);
	}


	[[G, dG, P0, dP0], [taus_fine, pol_fit]] = fit_seexp(taus, Ps, P_errs, 1.);

	exptitle = "Gamma = " + G + " mueV +- " + dG + " mueV";
	plot([taus, Ps, P_errs, ["style":"points"]], [taus_fine, pol_fit, ["style":"line"]],
		["xlabel" : "tau (ps)", "ylabel" : "Polarisation", "title" : exptitle, 
		"xlimits" : "0 " + (max(taus)+1.), "ylimits" : "0 1"]);
}


# -----------------------------------------------------------------------------


# Test
main()
{
	set_prec(4);
	files = ["/home/tweber/Messdaten/trisp-15/data/sc77165.log",
		"/home/tweber/Messdaten/trisp-15/data/sc77175.log",
		"/home/tweber/Messdaten/trisp-15/data/sc77166.log"];
	taus = [2., 3., 4.];
	do_seseries(files, taus);
}
